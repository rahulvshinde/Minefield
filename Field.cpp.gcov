        -:    0:Source:Field.cpp
        -:    0:Graph:Field.gcno
        -:    0:Data:Field.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "Field.h"
        -:    2:#include <iostream>
        -:    3:#include <vector>
        -:    4:
        -:    5:/**
        -:    6: * Constructor creates a 10x10 grid with no mines
        -:    7:**/
function _ZN5FieldC2Ev called 7 returned 100% blocks executed 86%
        7:    8: Field::Field()
call    0 returned 100%
call    1 never executed
        -:    9: {
        7:   10: 	_map.resize(FIELD_DIMENSION);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 never executed
       77:   11: 	for(unsigned int i=0; i < _map.size(); i++)
call    0 returned 100%
branch  1 taken 91% (fallthrough)
branch  2 taken 9%
        -:   12: 	{
       70:   13: 		_map[i].resize(FIELD_DIMENSION);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      770:   14: 		for(unsigned int j=0; j < _map[i].size(); j++)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 91% (fallthrough)
branch  3 taken 9%
        -:   15: 		{
      700:   16: 			_map[i][j] = EMPTY_HIDDEN;
call    0 returned 100%
call    1 returned 100%
        -:   17: 		}
        -:   18: 	}
        7:   19: }
        -:   20:
function _ZN5Field8inBoundsEii called 761 returned 100% blocks executed 100%
      761:   21: bool Field::inBounds(int x, int y)
        -:   22: {
      761:   23: 	if(x < 0 || x >= FIELD_DIMENSION || y < 0 || y >= FIELD_DIMENSION)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
branch  4 taken 98% (fallthrough)
branch  5 taken 2%
branch  6 taken 3% (fallthrough)
branch  7 taken 97%
        -:   24: 	{
       67:   25: 		return false;
        -:   26: 	}
        -:   27: 	else
      694:   28: 		return true;
        -:   29: }
        -:   30:
        -:   31: /**
        -:   32:  * Places a mine at the x,y coordinate in the field
        -:   33: **/
function _ZN5Field9placeMineEii called 23 returned 100% blocks executed 100%
       23:   34: void Field::placeMine(int x, int y)
        -:   35: {
       23:   36: 	if( inBounds(x,y) )
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       23:   37: 		_map[x][y] = MINE_HIDDEN;
call    0 returned 100%
call    1 returned 100%
       23:   38: }
        -:   39:
        -:   40: /**
        -:   41:  * Places a mine at the x,y coordinate in the field
        -:   42: **/
function _ZN5Field13placeShowMineEii called 1 returned 100% blocks executed 100%
        1:   43: void Field::placeShowMine(int x, int y)
        -:   44: {
        1:   45: 	if( inBounds(x,y) )
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   46: 		_map[x][y] = MINE_SHOWN;
call    0 returned 100%
call    1 returned 100%
        1:   47: }
        -:   48:
        -:   49:/**
        -:   50: * Retrieves the state of the field at location (x,y)
        -:   51:**/
function _ZN5Field3getEii called 11 returned 100% blocks executed 75%
       11:   52:FieldType Field::get(int x, int y)
        -:   53:{
       11:   54:	if( inBounds(x,y) )
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       22:   55: 		return _map[x][y];
call    0 returned 100%
call    1 returned 100%
        -:   56: 	else
    #####:   57: 		throw "Out of bounds";
call    0 never executed
call    1 never executed
        -:   58:}
        -:   59:
        -:   60:/**
        -:   61: * Returns whether or not _map at (x,y) has a mine and throws an
        -:   62: * exception if the location is illegal
        -:   63:**/
function _ZN5Field6isSafeEii called 3 returned 100% blocks executed 100%
        3:   64: bool Field::isSafe(int x, int y)
        -:   65: {
        3:   66: 	return inBounds(x,y) && (_map[x][y] != MINE_HIDDEN && _map[x][y] != MINE_SHOWN);
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
        -:   67: }
        -:   68:
        -:   69:/**
        -:   70: * Changes the location from EMPTY_HIDDEN to EMPTY_SHOWN for the 
        -:   71: * location and any valid locations adjacent (immediately above,
        -:   72: * below, left, or right as printed) to the provided (x,y) location
        -:   73:**/
function _ZN5Field14revealAdjacentEii called 723 returned 100% blocks executed 100%
      723:   74:void Field::revealAdjacent(int x, int y)
        -:   75:{
        -:   76:	bool inside;
      723:   77:	inside = inBounds(x,y);
call    0 returned 100%
      723:   78:	if( !inside || _map[x][y] == MINE_HIDDEN || _map[x][y] == MINE_SHOWN )
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 98% (fallthrough)
branch  5 taken 2%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
branch 10 taken 11% (fallthrough)
branch 11 taken 89%
        -:   79:	{
       77:   80:		return;
        -:   81:	}
      646:   82:	else if( _map[x][y] == EMPTY_HIDDEN )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 28% (fallthrough)
branch  3 taken 72%
        -:   83:	{
      180:   84:		_map[x][y] = EMPTY_SHOWN;
call    0 returned 100%
call    1 returned 100%
      180:   85:		revealAdjacent(x-1,y);
call    0 returned 100%
      180:   86:		revealAdjacent(x,y-1);
call    0 returned 100%
      180:   87:		revealAdjacent(x+1,y);
call    0 returned 100%
      180:   88:		revealAdjacent(x,y+1);
call    0 returned 100%
        -:   89:	}
function _GLOBAL__sub_I__ZN5FieldC2Ev called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:   90:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
